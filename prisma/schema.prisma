generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id                  String                   @id @default(uuid())
  full_name                String
  phone_number             String                   @db.VarChar(15)
  password                 String
  birth_date               DateTime
  email                    String?
  company_id               Int
  job_position_id          Int
  employment_status_id     Int
  department_id            Int
  role_id                  Int
  is_active                Boolean                  @default(true)
  job_position             JobPosition              @relation(fields: [job_position_id], references: [job_position_id])
  employment_status        EmploymentStatus         @relation(fields: [employment_status_id], references: [employment_status_id])
  department               Department               @relation(fields: [department_id], references: [department_id])
  company                  Company                  @relation(fields: [company_id], references: [company_id])
  role                     Role                     @relation(fields: [role_id], references: [role_id])
  ResponseUser             ResponseUser[]
  Attendance_health_result AttendanceHealthResult[]
  created_at               DateTime                 @default(now())
  deleted_at               DateTime?

  @@map("users")
}

model Company {
  company_id Int       @id @default(autoincrement())
  name       String
  users      User[]
  created_at DateTime  @default(now())
  deleted_at DateTime?

  @@map("companies")
}

model JobPosition {
  job_position_id Int       @id @default(autoincrement())
  name            String
  users           User[]
  created_at      DateTime  @default(now())
  deleted_at      DateTime?

  @@map("job_positions")
}

model EmploymentStatus {
  employment_status_id Int       @id @default(autoincrement())
  name                 String
  users                User[]
  created_at           DateTime  @default(now())
  deleted_at           DateTime?

  @@map("employment_statuses")
}

model Department {
  department_id Int       @id @default(autoincrement())
  name          String
  users         User[]
  created_at    DateTime  @default(now())
  deleted_at    DateTime?

  @@map("departments")
}

model Role {
  role_id    Int      @id @default(autoincrement())
  name       String
  users      User[]
  created_at DateTime @default(now())

  @@map("roles")
}

model Question {
  question_id     Int              @id @default(autoincrement())
  question        String
  question_answer QuestionAnswer[]
  response_user   ResponseUser[]
  created_at      DateTime         @default(now())
  deleted_at      DateTime?

  @@map("question")
}

model QuestionAnswer {
  question_answer_id Int            @id @default(autoincrement())
  question_answer    String
  value              Int
  question_id        Int
  response_user      ResponseUser[]
  question           Question       @relation(fields: [question_id], references: [question_id])
  created_at         DateTime       @default(now())
  deleted_at         DateTime?

  @@map("question_answer")
}

model ResponseUser {
  response_user_id            Int                    @id @default(autoincrement())
  user_id                     String
  question_id                 Int
  question_answer_id          Int
  attendance_health_result_id Int
  attendance_health_result    AttendanceHealthResult @relation(fields: [attendance_health_result_id], references: [attendance_health_result_id])
  user                        User                   @relation(fields: [user_id], references: [user_id])
  question                    Question               @relation(fields: [question_id], references: [question_id])
  question_answer             QuestionAnswer         @relation(fields: [question_answer_id], references: [question_answer_id])
  created_at                  DateTime               @default(now())

  @@map("response_user")
}

model AttendanceHealthResult {
  attendance_health_result_id Int                              @id @default(autoincrement())
  user_id                     String
  attendance_status           String
  work_duration_plan          String
  shift                       Boolean
  is_driver                   Boolean
  vehicle_hull_number         String?
  user                        User                             @relation(fields: [user_id], references: [user_id])
  result                      Result
  note                        String?
  recomendation               String
  attachment_health_file      AttendanceHealthFileAttachment[]
  response_user               ResponseUser[]
  created_at                  DateTime                         @default(now())

  @@map("attendance_health_results")
}

model AttendanceHealthFileAttachment {
  attendance_health_file_attachment_id Int                    @id @default(autoincrement())
  attendance_health_result_id          Int
  file_name                            String
  file_size                            Int
  file_type                            String
  file_url                             String
  attendance_health_result             AttendanceHealthResult @relation(fields: [attendance_health_result_id], references: [attendance_health_result_id])
  created_at                           DateTime               @default(now())

  @@map("attendance_health_file_attachment")
}

enum Result {
  FIT
  FIT_FOLLOW_UP
  UNFIT
}
